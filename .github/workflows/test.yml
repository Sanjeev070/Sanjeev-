name: CI

on:
  pull_request:
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'
  push:
    branches:
      - master
      - 'ci-multiarch'
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'

jobs:
#  test:
#    name: test ${{ matrix.os }} jdk${{ matrix.java }}
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, windows-latest, macos-latest ]
#        java: [ 8, 11, 16 ]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: ${{ matrix.java }}
#      - uses: actions/cache@v1
#        with:
#          path: ~/.cache
#          key: ${{ runner.os }}-jdk${{ matrix.java }}-${{ hashFiles('**/*.sbt') }}
#          restore-keys: ${{ runner.os }}-jdk${{ matrix.java }}-
#      - name: Test
#        run: mvn test

  test_multiarch:
    name: test ${{ matrix.arch }} ${{ matrix.distro }} jdk${{ matrix.java }}
    strategy:
      fail-fast: false
      matrix:
        # armv6 cannot install the JDK properly via apt-get on Debian
        arch: [ armv7, aarch64, ppc64le ]
        # no point adding Alpine, as we only have x86_64 binaries for it
        distro: [ ubuntu20.04 ]
        # cannot add Java 16, maven installed by apt-get is 3.6.x and does not support Java 16
        java: [ 8, 11 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gotson/run-on-arch-action@cachetag
        name: Test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          cacheTag: jdk${{ matrix.java }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y maven openjdk-${{ matrix.java }}-jdk

          # We use the Github Action user, 1001:121, so that maven can access
          # the /work directory and create target/classes
          dockerRunArgs: |
            --volume "${PWD}:/work"
            --user 1001:121

          run: |
            echo "Architecture: `uname -a`"
            mvn --version
            cd /work && mvn test