name: CI

on:
  pull_request:
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'
  push:
    branches:
      - master
      - '*'
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'

jobs:
  #  test:
  #    name: test ${{ matrix.os }} jdk${{ matrix.java }}
  #    strategy:
  #      matrix:
  #        os: [ubuntu-latest, windows-latest, macos-latest]
  #        java: [8, 11, 16]
  #    runs-on: ${{ matrix.os }}
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/setup-java@v1
  #        with:
  #          java-version: ${{ matrix.java }}
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cache
  #          key: ${{ runner.os }}-jdk${{ matrix.java }}-${{ hashFiles('**/*.sbt') }}
  #          restore-keys: ${{ runner.os }}-jdk${{ matrix.java }}-
  #      - name: Test
  #        run: mvn test

  test_multiarch:
    name: test ${{ matrix.arch }} ${{ matrix.distro }} jdk${{ matrix.java }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ armv7, aarch64 ]
        distro: [ buster, bullseye ]
        java: [ 11, 17 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y maven openjdk-${{ matrix.java }}-jdk

          dockerRunArgs: |
            --volume "${PWD}:/work"
            --user 1001:121

          run: |
            echo "Architecture: `uname -a`"
            echo "Java version: `java -version`"
            echo "Java home: $JAVA_HOME"
            cd /work && mvn test