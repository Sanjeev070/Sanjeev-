name: CI

on:
  pull_request:
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'
  push:
    branches:
      - master
    paths:
      - '**.java'
      - '**.xml'
      - '**.so'
      - '**.jnilib'
      - '**.dll'
      - '.github/workflows/*.yml'

jobs:
  lint:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11
          java-package: jdk
          cache: 'maven'
      - name: spotless:check
        run: mvn spotless:check

  test:
    name: test ${{ matrix.os }} jdk${{ matrix.java }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        java: [ 8, 11, 17 ]
        exclude:
          - os: windows-latest
            java: 11
          - os: windows-latest
            java: 8
          - os: macos-latest
            java: 11
          - os: macos-latest
            java: 8
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          java-package: jdk
          cache: 'maven'
      - name: Test
        run: mvn test

  test_graalvm:
    name: test ubuntu-latest jdk11 GraalVM native-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: DeLaGuardo/setup-graalvm@master
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: '21.0.0.2'
          # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
          java: 'java11'
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: 'amd64'
      - name: Install native-image component
        run: |
          gu install native-image
      - name: Test
        run: mvn -Pnative test

  test_multiarch:
    name: test ${{ matrix.arch }} ${{ matrix.distro }} jdk${{ matrix.java }}
    strategy:
      matrix:
        # armv6 cannot install the JDK properly via apt-get on Debian
        arch: [ armv7, aarch64 ]
        # no point adding Alpine, as we only have x86_64 binaries for it
        distro: [ ubuntu20.04 ]
        # cannot add Java 16, maven installed by apt-get is 3.6.x and does not support Java 16
        # use only java 11, so we don't run too many CI jobs
        java: [ 11 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y maven openjdk-${{ matrix.java }}-jdk

          # We use the Github Action user, 1001:121, so that maven can access
          # the /work directory and create target/classes
          dockerRunArgs: |
            --volume "${PWD}:/work"
            --user 1001:121

          run: |
            echo "Architecture: `uname -a`"
            mvn --version
            cd /work && mvn test

  release:
    name: Deploy
    needs: [ lint, test, test_graalvm, test_multiarch ]
    if: github.ref == 'refs/heads/master' # only perform on latest master
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v2
        with: # running setup-java again overwrites the settings.xml
          distribution: 'temurin'
          java-version: '8'
          java-package: jdk
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_CENTRAL_USERNAME # env variable for username in deploy (1)
          server-password: MAVEN_CENTRAL_PASSWORD # env variable for token in deploy (2)
          gpg-private-key: ${{ secrets.GPG_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_CENTRAL_GPG_PASSPHRASE # env variable for GPG private key passphrase (3)
      - name: Get Project Version
        run: |
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Publish to Apache Maven Central
        if: ${{ endsWith(env.PROJECT_VERSION, '-SNAPSHOT') }}
        run: mvn deploy -P release -DskipTests
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }} # must be the same env variable name as (1)
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }} # must be the same env variable name as (2)
          MAVEN_CENTRAL_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }} # must be the same env variable name as (3)